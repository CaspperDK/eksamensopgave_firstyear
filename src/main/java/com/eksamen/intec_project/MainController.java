package com.eksamen.intec_project;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;


import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/intec") // This means URL's start with /intec (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    public MainController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @GetMapping(path="/homepage")
    public String showLoginPage() {
        return "homepage";
    }

    @PostMapping(path="/homepage")
    public String loginUser(@RequestParam String email, @RequestParam String password, Model model) {
        User user = userRepository.findByEmail(email);
        if (user != null && user.getPassword().equals(password)) {
            model.addAttribute("message", "Welcome, " + user.getName() + "!");
            return "welcome";
        } else {
            model.addAttribute("error", "Invalid username or password");
            return "login";
        }
    }

    @GetMapping(path="/add")
    public String showAddForm() {
        return "add-user";
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);
        userRepository.save(n);
        return "Saved";
    }


    @GetMapping(path="/remove")
    public String showRemoveForm() {
        return "remove-user";
    }
    @PostMapping(path="/remove") // Map ONLY POST Requests
    public @ResponseBody String removeUser (@RequestParam String email) {
        User user = userRepository.findByEmail(email);
        if (user != null) {
            userRepository.delete(user);
            return "User removed";
        } else {
            return "User not found";
        }
    }
    @GetMapping(path = "/edit")
    public String showEditForm(@RequestParam int id, Model model) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            model.addAttribute("user", user.get());
            return "edit-user";
        } else {
            return "error";
        }
    }

    @PostMapping(path = "/edit")
    public String editUser(@ModelAttribute User user, Model model) {
        Optional<User> existingUser = userRepository.findById(user.getId());
        if (existingUser.isPresent()) {
            User updatedUser = existingUser.get();
            updatedUser.setName(user.getName());
            updatedUser.setEmail(user.getEmail());
            updatedUser.setPassword(user.getPassword());
            userRepository.save(updatedUser);
            model.addAttribute("message", "User updated successfully.");
            return "welcome";
        } else {
            model.addAttribute("error", "User not found.");
            return "error";
        }
    }
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}